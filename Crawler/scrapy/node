scrapy框架：
- 什么是框架？
    - 就是一个集成了很多功能并且有很强通用性的一个项目模板。
- 如何学习框架？
    - 专门学习框架封装的各种功能的详细用法。

- 什么是crapy？
    - 爬虫中封装好的一个明星框架。功能：高性能的持久化存储，异步的数据下载，高性能的数据解析，分布式

- scrapy框架的基本使用
    - 环境的安装：
        - mac or linux: pip install scrapy

    - 创建一个工程
    - scrapy startproject xxxPro
    - cd proj
    - 在spiders子目录创建一个爬虫文件
        - scrapy genspider first www.xxx.com
    - 执行工程
        - scrapy crawl spiderName(就是指定的爬虫文件)
- scrapy数据解析

- scrapy持久化存储：
    - 基于终端指令：
        - 要求：只可以将parse方法的返回值存储到本地的文件中
        - 注意：基于终端的指令，存储文本只可以存储为('json', 'jsonlines', 'jl', 'csv', 'xml', 'marshal', 'pickle')
        - 指令：crawl myImage -o xxxx.json
        - 好处：简介高效便捷
        - 缺点：局限性比较强（数据只可以存储到置顶的后缀的文本文件中）

    - 基于管道：
    - 编码流程：
        - 数据解析 
        - 在item类中定义相关的属性
        - 将解析的数据封装存储到item类型的对象
        - 将item类型的对象提交给管道持久化存储的操作
        - 在管道类的process_item中要将其接收到的item对象进行持久化操作
        - 在配置文件中开启管道
    - 好处
        - 就是通用性前
    - 面试题：如果要将爬取到的数据一份存储到数据库，另一份存储到本地
        — 可以定义多个pipeline的管道类
        - 管道文件中一个管道类对应的是将数据存储到一个平台
        - 爬虫文件提交的item只会给第一个被执行的管道类接收
        - process_item中的return item表示将item返回传递给下一个管道类。
- 基于Spider的全栈数据爬取
    - 就是将网站中某板块下的全部页面对应的页面数据进行爬取
    - 需求：爬取校花万爬取，网页图片
    - 实现方式有哪些
        - 将所有页面的url添加到start_urls列表（不推荐）
        - 自行手动进行发送请求（推荐）
            - 手动请求发送：
                - yield scrapy.Request(url,callback)： callback专门用来进行数据解析

- 五大核心组件：
    - 调度器
        - 过滤器
    - 管道 
    - 引擎
    - Spider 
    - 下载器


- 请求传参
    - 使用场景：如果爬取解析的数据不在同一张页面中。（深度爬取）
    - 需求：爬取boss直聘的岗位名称，以及详情页岗位描述。scra

- 图片数据爬取值ImagesPipeline
    - 基于scrapy爬取字符串类的数据和爬取图片类型的区别？
        - 字符串：只需要基于xpath进行解析且提交管道进行持久化存储
        - 图片：xpath解析出图片src的属性值。单独对图片发起请求获取图片二进制类型的数据
    - ImagesPipeline
        - 只需要将img的src属性进行解析，提交到管道，管道就会对图片的src进行请求发送获取图片的二进制数据
    - 需求：爬取站长素材中的高清图片
    - 使用流程：
        - 数据解析（图片的地址）
        - 将存储图片地址的item提交到指定的管道类
        - 在管道文件中自定义一个基于ImagesPipeLine的一个管道类
            - get_media_request
            - file_path
            _ item_completed
        - 在配置文件中：
            - 指定图片存储的目录：IMAGES_STORE = 'unused/imgs'
            - 指定开启的管道类：自定义的管道类

- 中间件
    - 下载中间件
        - 位置：引擎和下载器之间
        - 作用：批量拦截到整个工程中所有的请求和响应
        - 拦截请求：
            - UA伪装
            - 代理IP
        - 拦截响应：
            - 篡改响应数据，响应对象
            - 网易新闻项目
                -需求：爬取网易新闻的首页解析出五大板块对应的详情页的url（没有动态加载）
                - 2.每一个板块对应的新闻标题都动态加载（动态加载）
                - 3.通过解析出每一条新闻详情页的url获取详情页的页面源码，解析出新闻内容    
            
